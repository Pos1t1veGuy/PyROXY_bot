from typing import *
from aiogram import Router, F
from keyboards import (cipher_buttons_menu, select_user_key_menu, default_menu, how_to_connect_menu, balance_menu,
                       select_tarif_menu, password_menu)
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError
from aiogram.types import BufferedInputFile, FSInputFile, Message, CallbackQuery
import random
import string
import asyncio
import os

from .utils import msg_timeout, disable_msg_timeout


class KeyInput(StatesGroup):
    waiting_for_key = State()


connect_router = Router()


class ConnectRouter:
    def __init__(self,
                 server_host: str,
                 default_server_key: str,
                 ciphers: List[str],
                 db_handler: 'Handler'):

        global connect_router
        self.router = connect_router
        self.db_handler = db_handler
        self.host = server_host
        self.ciphers = ciphers
        self.default_server_key = default_server_key

        # guides
        self.router.callback_query.register(self.connect_guide, F.data == "connect_guide")
        self.router.callback_query.register(self.encryption_guide, F.data == "encryption_guide")

        # password
        self.router.callback_query.register(self.cmd_connect, F.data.startswith("connect"))
        self.router.callback_query.register(self.generate_pw, F.data == "generate_new_pw")
        self.router.callback_query.register(self.find_last_pw, F.data == "use_last_pw")

        # cipher
        self.router.callback_query.register(self.input_key, F.data.startswith("cipher:"))
        self.router.callback_query.register(self.choose_cipher, F.data == "choose_cipher")
        self.router.message.register(self.key_input_received, KeyInput.waiting_for_key)
        self.router.callback_query.register(self.generate_key, F.data == "generate_new_key")
        self.router.callback_query.register(self.find_last_key, F.data == "use_last_key")



    async def cmd_connect(self, callback, state):
        if await self.subscriber_only(callback):
            if callback.data.split(":")[-1] == 'back':
                method = callback.message.edit_text
            else:
                method = callback.message.answer

            sent = await method("üîí <b>–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä–æ–ª—å</b>, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ "
                                "–ø—Ä–æ–∫—Å–∏ —Å–µ—Ç–∏.\n\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ–ª—å–∑—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º!",
                                reply_markup=password_menu, parse_mode='HTML')
            await callback.answer()

            asyncio.create_task(msg_timeout(state, sent, callback.bot))

    async def generate_pw(self, callback, state):
        if await self.subscriber_only(callback):
            await disable_msg_timeout(state)

            new_pw = ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(8, 32)))
            self.db_handler.save_password(callback.from_user.username, new_pw)

            await self.choose_cipher(callback, state)

    async def find_last_pw(self, callback, state):
        if await self.subscriber_only(callback):
            await disable_msg_timeout(state)
            pw = self.db_handler.find_password(callback.from_user.username)
            if pw:
                await self.choose_cipher(callback, state)
            else:
                await callback.message.edit_text("‚ùå –ü—Ä–æ—à–ª—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=default_menu)


    async def choose_cipher(self, callback, state):
        if await self.subscriber_only(callback):
            sent = await callback.message.edit_text("üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è</b>, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–æ–∫—Ä—ã–≤–∞—Ç—å—Å—è "
                                                    "–≤–∞—à —Ç—Ä–∞—Ñ–∏–∫.\n\n‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –¥–ª—è"
                                                    "–Ω–∞–∏–±–æ–ª—å—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <b>default</b> (–±–µ–∑ —à–∏—Ñ—Ä–∞).",
                                                    reply_markup=cipher_buttons_menu, parse_mode='HTML')
            await callback.answer()

            asyncio.create_task(msg_timeout(state, sent, callback.bot))


    async def generate_key(self, callback, state):
        if await self.subscriber_only(callback):
            await disable_msg_timeout(state)

            new_key = self.generate_cipher_key().hex()
            if self.db_handler.save_key(callback.from_user.username, new_key):
                await callback.message.edit_text(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –Ω–æ–≤—ã–π –∫–ª—é—á: ```{new_key}```",
                                              reply_markup=how_to_connect_menu, parse_mode='Markdown')
            else:
                await message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=default_menu
                )
            await callback.answer()

    async def find_last_key(self, callback, state):
        if await self.subscriber_only(callback):
            await disable_msg_timeout(state)

            key = self.db_handler.find_key(callback.from_user.username)
            if key:
                await callback.message.edit_text(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—à–ª—ã–π –∫–ª—é—á: ```{key}```",
                                              reply_markup=how_to_connect_menu, parse_mode='Markdown')
            else:
                await message.edit_text(
                    "‚ùå –ü—Ä–æ—à–ª—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=default_menu
                )
            await callback.answer()

    async def input_key(self, callback, state):
        if await self.subscriber_only(callback):
            await disable_msg_timeout(state)

            cipher_type = callback.data.split(":")[1]

            if cipher_type == 'back':
                data = await state.get_data()
                cipher_type = data.get("cipher_type")
            else:
                self.db_handler.save_cipher(callback.from_user.username, cipher_type)

            msg = await callback.message.edit_text(
                f"‚úÖ `{cipher_type}`\n–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ **–∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è** (–ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –±—É–∫–≤–∞–º–∏):",
                reply_markup=select_user_key_menu, parse_mode='Markdown'
            )
            await state.update_data(cipher_type=cipher_type, last_msg_id=callback.message.message_id)
            await state.set_state(KeyInput.waiting_for_key)
            await callback.answer()


    async def key_input_received(self, message, state):
        if await self.subscriber_only(message):
            key = message.text.strip()

            data = await state.get_data()
            cipher_type = data.get("cipher_type")
            last_msg_id = data.get("last_msg_id")

            is_valid, msg = self.validate_cipher_key(cipher_type, key)
            if not is_valid:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=last_msg_id,
                    text=f'‚ùå –û—à–∏–±–∫–∞: {msg}',
                    reply_markup=default_menu)
                return

            hex_key = key.encode().hex()
            if self.db_handler.save_key(message.from_user.username, hex_key):
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=last_msg_id,
                    text=f"‚úÖ –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –≤–æ—Ç –µ–≥–æ hex —Ñ–æ—Ä–º–∞—Ç: `{hex_key}`",
                    reply_markup=how_to_connect_menu,
                    parse_mode='Markdown'
                )
            else:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=last_msg_id,
                    text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=default_menu
                )
            await state.clear()


    async def connect_guide(self, callback, state):
        username = callback.from_user.username
        if self.db_handler.is_subscriber(username):
            key = self.db_handler.find_key(username)
            password = self.db_handler.find_password(username)
            cipher = self.cipher_to_parameter(self.db_handler.find_cipher(username))
            profile_data = (f'host={self.host}\nusername={username}\npassword={password}\nkey={key}\n'
                            f'cipher={cipher}\ndefault_key={self.default_server_key}').encode()

            await callback.message.answer_document(
                document=BufferedInputFile(profile_data, filename="profile.pyroxy"),
                caption=(
                    "üîê –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Æ:\n\n"
                    "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ `pyroxy_client.zip` –∏ —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ –µ–≥–æ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ, —ç—Ç–æ –≤–∞—à –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç.\n"
                    "2Ô∏è‚É£ –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª `profile.pyroxy` –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç.\n"
                    "3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ `console_client.exe` –∏–ª–∏ `no_console_client.exe` –≤ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
                    "‚ö†Ô∏è –§–∞–π–ª `profile.pyroxy` —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                    "‚Ä¢ –í–∞—à –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
                    "‚Ä¢ –ü–∞—Ä–æ–ª—å\n"
                    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n\n"
                    "üö´ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!\n"
                    "–ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–ø–∞–¥—ë—Ç –≤ —á—É–∂–∏–µ —Ä—É–∫–∏, –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n"
                    "–Ø –Ω–µ –Ω–µ—Å—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞ —Ç—Ä–∞—Ñ–∏–∫, –ø—Ä–æ—Ö–æ–¥—è—â–∏–π —á–µ—Ä–µ–∑ VPN.\n"
                ),
                reply_markup=default_menu, parse_mode='Markdown'
            )
            await callback.message.answer_document(
                document=FSInputFile("pyroxy_client.zip"),
                caption="üì¶ –≠—Ç–æ –∫–ª–∏–µ–Ω—Ç PyROXY. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
            )
        else:
            await callback.message.answer("‚ö† –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø (–ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
                                          " <b><u>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç—Ä–µ—Ö–¥–Ω–µ–≤–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º</u></b>, –Ω–æ —ç—Ç–æ —Å–µ–∫—Ä–µ—Ç)",
                                          reply_markup=select_tarif_menu, parse_mode="HTML")

        await callback.answer()

    async def encryption_guide(self, callback, state):
        await callback.message.answer("üîí **–î–û–°–¢–£–ü–ù–´–ï –ê–õ–ì–û–†–ò–¢–ú–´ –®–ò–§–†–û–í–ê–ù–ò–Ø:**\n\n" + '\n'.join([
                f'*{name}*\n{description}\n' for name, description in self.ciphers.items()
            ]),
            reply_markup=default_menu, parse_mode='Markdown'
        )
        await callback.answer()


    def validate_cipher_key(self, cipher_type: str, key: str) -> Tuple[bool, str]:
        available_chars = string.ascii_letters + string.digits + '_-'

        true_chars = [(char in available_chars) for char in key]
        if all(true_chars):
            match cipher_type:
                case "ChaCha20-Poly1305":
                    return (len(key) == 32,
                        '–∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ [a-z]+[0-9]+[_]+[-] –¥–ª–∏–Ω–æ–π –≤ 32 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                case "AES_CTR":
                    return (len(key) in [16,24,32],
                        '–∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ [a-z]+[0-9]+[_]+[-] –¥–ª–∏–Ω–æ–π –≤ 16/24/32 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                case "AES_CBC":
                    return (len(key) in [16,24,32],
                        '–∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ [a-z]+[0-9]+[_]+[-] –¥–ª–∏–Ω–æ–π –≤ 16/24/32 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                case _:
                    return False, f'–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞ {cipher_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'

        else:
            invalid_chars = [f'{i}: {key[i]}\n' for i, char in enumerate(true_chars) if not char][:20]
            return False, (
                f'–∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ [a-z]+[0-9]+[_]+[-];\n\n|>  {key}  <|\n\n'
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:\n\n' + ''.join(invalid_chars)
            )

    def cipher_to_parameter(self, cipher_type: str) -> str:
        match cipher_type:
            case "ChaCha20-Poly1305":
                return 'chacha20'
            case "AES_CTR":
                return 'aes_ctr'
            case "AES_CBC":
                return 'aes_cbc'
            case _:
                return 'none'

    def generate_cipher_key(self) -> str:
        return os.urandom(32)

    async def subscriber_only(self, event) -> bool:
        if not self.db_handler.is_subscriber(event.from_user.username):
            text = "‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø"
            if isinstance(event, CallbackQuery):
                await event.message.answer(text, reply_markup=balance_menu)
            elif isinstance(event, Message):
                await event.answer(text, reply_markup=balance_menu)
            await event.answer()
            return False

        return True