from typing import *
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
from keyboards import (balance_menu, default_menu, payment_methods_menu, pricing_menu, money_to_pay_menu,
                       confirm_buy_menu, confirm_payment_menu, confirm_not_invoice_menu)
import asyncio

from .utils import msg_timeout, disable_msg_timeout


class DetailsInput(StatesGroup):
    waiting_for_key = State()


subtion_router = Router()


class SubtionRouter:
    def __init__(self, db_handler: 'Handler', payment_methods: Dict[str, str], author_id: int,
                 after_not_invoice_payment: Optional[Callable[[str, int, str], None]] = None):

        global subtion_router
        self.router = subtion_router
        self.payment_methods = payment_methods
        self.after_not_invoice_payment = after_not_invoice_payment
        self.db_handler = db_handler
        self.author_id = author_id

        self.router.callback_query.register(self.cmd_subtion, F.data.startswith("subscription"))
        self.router.callback_query.register(self.top_up, F.data == "top_up")
        self.router.callback_query.register(self.select_method, F.data.startswith("method:"))
        self.router.callback_query.register(self.confirm_payment, F.data.startswith("confirm_payment:"))
        self.router.message.register(self.details_input_received, DetailsInput.waiting_for_key)
        self.router.callback_query.register(self.payment, F.data == "payment")

        self.router.callback_query.register(self.pricing, F.data == "pricing")
        self.router.callback_query.register(self.confirm_buy, F.data.startswith("confirm_buy:"))
        self.router.callback_query.register(self.buy, F.data == "buy")

    async def cmd_subtion(self, callback):
        balance = self.db_handler.get_user_balance(callback.from_user.username)
        if callback.data.split(":")[-1] == 'back':
            method = callback.message.edit_text
        else:
            method = callback.message.answer

        time_left = self.db_handler.get_access_expiry(callback.from_user.username)
        access = f'\n{self.format_timedelta_until(time_left)}' if time_left else ''
        await method(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{balance}*{access}", reply_markup=balance_menu, parse_mode='Markdown')
        await callback.answer()


    async def top_up(self, callback, state):
        sent = await callback.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=payment_methods_menu)
        await callback.answer()
        asyncio.create_task(msg_timeout(state, sent, callback.bot))

    async def select_method(self, callback, state):
        await disable_msg_timeout(state)

        method = callback.data.split(":")[1]

        if method == 'back':
            data = await state.get_data()
            method = data.get("method")

        await state.update_data(method=method)
        method_data = self.payment_methods[method]

        if method_data['invoice']:
            sent = await callback.message.edit_text(
                f"üí≥ –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: `{method}`. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã",
                reply_markup=money_to_pay_menu, parse_mode="Markdown"
            )
        else:
            sent = await callback.message.edit_text(
                f"üí≥ –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: `{method}`. –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω—É—é —Å—É–º–º—É "
                f"–Ω–∞ —Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤. –í–æ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: \n\n"
                f"`{method_data['token']}`\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç:",
                reply_markup=confirm_not_invoice_menu, parse_mode="Markdown"
            )

        await callback.answer()
        asyncio.create_task(msg_timeout(state, sent, callback.bot))

    async def confirm_payment(self, callback, state):
        await disable_msg_timeout(state)
        money = callback.data.split(":")[1]
        await state.update_data(money=money)

        data = await state.get_data()
        method = data.get("method")
        method_data = self.payment_methods[method]

        if method_data['invoice']:
            sent = await callback.message.edit_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:", reply_markup=confirm_payment_menu)
        else:
            sent = await callback.message.edit_text(
                "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–ª–∞—Ç—ë–∂.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n"
                "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ –∫–∞—Ä—Ç–µ\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –≤–æ–∑–º–æ–∂–Ω–∞ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º –∏–∑"
                " –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=default_menu
            )
            await state.update_data(bot_message_id=sent.message_id)
            await state.set_state(DetailsInput.waiting_for_key)

        await callback.answer()

        asyncio.create_task(msg_timeout(state, sent, callback.bot))

    async def details_input_received(self, message, state):
        payment_id = self.db_handler.add_pending_payment(message.from_user.username, message.from_user.id,
                                                         message.text.strip(), do_after=self.after_not_invoice_payment)
        try:
            await message.delete()
        except Exception:
            pass

        data = await state.get_data()
        bot_message_id = data.get("bot_message_id")
        text = f"üéâ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç... –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤"

        if bot_message_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=bot_message_id,
                    text=text,
                    reply_markup=default_menu
                )
            except:
                await message.answer(text, reply_markup=default_menu)
        else:
            await message.answer(text, reply_markup=default_menu)

        try:
            await message.bot.send_message(
                self.author_id,
                f"üí∞ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n"
                f"> {payment_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {message.from_user.id})\n"
                f"üìÑ –î–µ—Ç–∞–ª–∏: {message.text.strip()}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

        await state.clear()

    async def payment(self, callback, state):
        await disable_msg_timeout(state)

        data = await state.get_data()
        method = data.get("method")
        method_data = self.payment_methods[method]

        money = int(data.get("money"))
        # TODO: –¥–æ–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É –∏–Ω–≤–æ–π—Å–∞–º–∏
        await callback.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title="–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ PyROXY",
            description=f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {method}",
            payload="custom_payload_data",
            provider_token=self.payment_methods[method],
            currency="RUB",
            prices=[
                # types.LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", amount=money * 100)
            ],
            start_parameter=f"proxy-{money}r",
            is_flexible=False
        )
        self.db_handler.pay(callback.from_user.username, money)
        await callback.message.edit_text(f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! {method} {money}", reply_markup=default_menu)

    async def pricing(self, callback, state):
        await disable_msg_timeout(state)

        await callback.message.edit_text("üìä –í–æ—Ç –º–æ–∏ —Ç–∞—Ä–∏—Ñ—ã:", reply_markup=pricing_menu)
        await callback.answer()

    async def confirm_buy(self, callback, state):
        _, name, price, once, days = callback.data.split(":")
        once = once == 'True'
        once_str = ' –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π!' if once else ''

        if (self.db_handler.tarif_was(callback.from_user.username, tarif_name=name) and once) or not once:
            await state.update_data(buy=name, price=price, days=days)
            subs = ''
            if self.db_handler.is_subscriber(callback.from_user.username):
                subs = f'–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è.\n'
            sent = await callback.message.edit_text(
                f"üì¶ –î–æ—Å—Ç—É–ø –Ω–∞ {days} –¥–Ω–µ–π –∑–∞ {price} —Ä—É–±–ª–µ–π.{once_str}\n{subs}–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
                reply_markup=confirm_buy_menu
            )
        else:
            sent = await callback.message.edit_text(
                f"üì¶ –î–æ—Å—Ç—É–ø –Ω–∞ {days} –¥–Ω–µ–π –∑–∞ {price} —Ä—É–±–ª–µ–π.{once_str}\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ(",
                reply_markup=default_menu
            )
        await callback.answer()
        asyncio.create_task(msg_timeout(state, sent, callback.bot))

    async def buy(self, callback, state):
        data = await state.get_data()
        balance = self.db_handler.get_user_balance(callback.from_user.username)
        money = int(data.get("price"))
        days = int(data.get("days"))
        buy_name = data.get("buy")

        if balance >= money:
            if self.db_handler.buy(callback.from_user.username, buy_name, days, money):
                await callback.message.edit_text("‚úÖ –¢–∞—Ä–∏—Ñ –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è)", reply_markup=default_menu)
                await callback.answer()
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ—Ä—É", reply_markup=default_menu)
        else:
            await callback.message.edit_text(f"‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {balance}", reply_markup=default_menu)



    def format_timedelta_until(self, expiry_time: Optional[datetime]) -> str:
        if expiry_time is None:
            return "–î–æ—Å—Ç—É–ø –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        now = datetime.now()
        if expiry_time <= now:
            return "–î–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫"

        delta = expiry_time - now

        days = delta.days
        hours, remainder = divmod(delta.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        parts = []
        if days > 0:
            parts.append(f"{days} –¥–Ω.")
        if hours > 0:
            parts.append(f"{hours} —á.")
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω.")
        if not parts:
            parts.append(f"{seconds} —Å–µ–∫.")  # –µ—Å–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å

        return "–í–∞—à –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ " + " ".join(parts)